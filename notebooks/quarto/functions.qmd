---
title: "Functions"
format: html
editor: visual
---

## Functions

One of the central tenets of reproducible analyses is the DRY principle -- Don't Repeat Yourself. If you find that you are repeating the same lines of code, it might be time to write a function.

Functions take the following basic format:

```{r}
myfunction <- function(argument_name){
  stuff <- "this is the body of the function(it contains statements that use `argument_name` to do things and make stuff)"
  return(stuff)}
```

More formally, R functions are broken up into 3 pieces:

**formals()**- the list of arguments

**body()** - code inside the function

**environment()** - how the function finds the values associated with function names

Here's an example of a function called `roll()` that rolls any number of 6-sided dice:

```{r}
roll <- function(number_of_dice){
    rolled_dice <- sample(
        x = 6, 
        size = number_of_dice, 
        replace = TRUE)
    return(rolled_dice)}
```

-   The built-in R function `sample()` is nested inside our `roll()` function.

-   `roll()` uses the argument `number_of_dice` as the `size`, `x` is the number of sides on the die, which we have hard-coded as `6`, and `replace = TRUE` means that we are sampling the space of all potential die roll outcomes with replacement.

-   Lastly, we tell the function what it should return (`rolled_dice`).

To call that function and print the output:

```{r}
roll(number_of_dice = 10)
```

Lets look at the `formals()`

```{r}
formals(roll)
```

What about `body()`?

```{r}
body(roll)
```

What about `environment()`?

```{r}
environment(roll)
```

::: callout-note
Now that you know how to write functions, \*\*write a function that will plot the life expectancy of any country (given as a function argument) and include the name of the country as the title (using `ggtitle`)\*\*
:::

```{r}

plot_by_country <- function(input_table, country){
  country_data <- input_table[input_table$name %in% country,]
  country_plot <- ggplot(data = country_data, aes(x = time, y = Life.expectancy)) + 
    geom_line() + ggtitle(country)
  return(country_plot)}
test <- plot_by_country(gm_lex_raw, 'Afghanistan')

  
plot_by_country2 <- function(input_table, country){
  country_data <- input_table %>% dplyr::filter(name == country) 
  country_plot <- ggplot(data = country_data, aes(x = time, y = Life.expectancy)) + 
    geom_line() + ggtitle(country)
  return(country_plot)}
test <- plot_by_country2(gm_lex_raw, 'Afghanistan')

```

can_plot \<- ggplot(data = c, aes(x = time, y = Life.expectancy)) +
 geom_line()
can_plot
