---
title: "figures"
format: html
editor: visual
---

## Arranging figures using facets and patchwork 

Earlier in this workshop, we went into some detail about how to make figures in `ggplot2`. We can add some more layers of complexity to our figures using `facet_wrap()` and `facet_grid()` to create subplots displaying subsets of data. Use `facet_grid()` for a single variable and `facet_wrap()` for 2 variables.

Here's an example with the `mpg` data, where we are faceting by `class` and specifying that we want the figures arranged in two rows with the `nrow=2` argument.

```{r}
ggplot2::ggplot(data=mpg) +
    geom_point(mapping=aes(x=displ,y=hwy)) +
    facet_wrap(~ class, nrow=2)
```

When using `facet_grid()`, some of the facets might be empty if there's no observations with those particular combinations, which we will see in the following figure:

```{r}
ggplot2::ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) + 
  facet_grid(drv ~ cyl)
```

There's also a few different themes that come build into `ggplot2` that we can use to change the default figure settings (there are other packages like `ggthemes` that have even more options).

```{r}
base <- ggplot2::ggplot(mpg, aes(displ, hwy)) +
  geom_point(aes(color = class)) +
  geom_smooth(se = FALSE)

p1 <- base + theme_bw()
p2 <- base + theme_light()
p3 <- base + theme_classic()
p4 <- base + theme_linedraw()
p5 <- base + theme_dark()
p6 <- base + theme_minimal()
p7 <- base + theme_void()

plot_list_mpg <- list(p1, p2, p3, p4, p5, p6, p7)
```

We can use `wrap_plots` from the `patchwork` package to arrange these plots, specifying that we want them arranged in two columns (`ncol = 2`)

```{r}
patchwork::wrap_plots(plot_list_mpg, ncol = 2)
```

You can also move the legend around:

```{r}
patchwork::wrap_plots(plot_list_mpg, ncol = 2) & 
  theme(legend.position='bottom')
```

The `&` tells patchwork to apply to all plots in the list -- if we used `+` instead it would only apply the formatting to the last figure:

```{r}
patchwork::wrap_plots(plot_list_mpg, ncol = 2) + 
  theme(legend.position='bottom')
```

We can also add some annotations to the plots:

```{r}
patchwork::wrap_plots(plot_list_mpg, ncol = 2) & 
  patchwork::plot_annotation(tag_levels = 'A')
```

::: callout-note
Earlier you wrote a function to plot the life expectancy for any given country. Add a `theme` of your choice to that function. Use an `lapply` statement to apply the function on three countries of your choice. Use `patchwork()` to arrange and annotate the plots.
:::

```{r}
plot_by_country_theme <- function(input_table, country){
  country_data <- input_table[input_table$name %in% country,]
  country_plot <- ggplot(data = country_data, aes(x = time, y = Life.expectancy)) + 
    geom_line() + 
    ggtitle(country) +
    theme_classic()
  return(country_plot)}

country_list = list('Spain', 'Japan', 'Canada')

plot_list_themed <- lapply(country_list, plot_by_country_theme, input_table = gm_lex_raw)

patchwork::wrap_plots(plot_list_themed, ncol = 1) & 
  patchwork::plot_annotation(tag_levels = 'A')
```
